plugins {
    id("com.github.johnrengelman.shadow").version("7.1.2")
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom(common)
    runtimeClasspath.extendsFrom(common)
    developmentFabric.extendsFrom(common)
}

dependencies {
    modImplementation("net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}")
    modApi("net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}")
    modApi("dev.architectury:architectury-fabric:${rootProject.architectury_version}")

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon("net.elytrium.commons:config:${rootProject.elytrium_commons_version}")
    shadowCommon("org.yaml:snakeyaml:${rootProject.snakeyaml_version}")
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

processResources {
    inputs.property("version", project.version)

    filesMatching("fabric.mod.json") {
        expand("version": project.version)
    }
}

shadowJar {
    exclude("architectury.common.json")

    setConfigurations([project.configurations.shadowCommon])
    classifier("dev-shadow")
    relocate("net.elytrium.commons", "net.elytrium.limboauth.thirdparty.commons")
    relocate("org.yaml", "net.elytrium.limboauth.thirdparty.org.yaml")
}

remapJar {
    injectAccessWidener = true
    input.set(shadowJar.archiveFile)
    dependsOn(shadowJar)
    classifier("fabric")
}

jar {
    classifier("dev")
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn(commonSources)
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

license {
    setHeader(getRootProject().file("HEADER.txt"))
}